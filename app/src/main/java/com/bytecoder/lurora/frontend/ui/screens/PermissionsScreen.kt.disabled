package com.bytecoder.lurora.frontend.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.bytecoder.lurora.backend.models.*
import com.bytecoder.lurora.frontend.viewmodels.PermissionsViewModel

/**
 * Permissions Screen with comprehensive permission management
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PermissionsScreen(
    viewModel: PermissionsViewModel = hiltViewModel(),
    onNavigateBack: () -> Unit = {},
    onOpenSettings: () -> Unit = {},
    modifier: Modifier = Modifier
) {
    val permissions by viewModel.permissions.collectAsStateWithLifecycle()
    val categorizedPermissions by viewModel.categorizedPermissions.collectAsStateWithLifecycle()
    val searchQuery by viewModel.searchQuery.collectAsStateWithLifecycle()
    val selectedCategory by viewModel.selectedCategory.collectAsStateWithLifecycle()
    val showOnlyRequired by viewModel.showOnlyRequired.collectAsStateWithLifecycle()
    
    var showInfoDialog by remember { mutableStateOf<AppPermission?>(null) }
    var showSettingsDialog by remember { mutableStateOf(false) }
    
    Column(modifier = modifier.fillMaxSize()) {
        // Header with search and controls
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            // Title and settings row
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "App Permissions",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold
                )
                
                Row {
                    IconButton(onClick = { showSettingsDialog = true }) {
                        Icon(Icons.Default.Settings, contentDescription = "Settings")
                    }
                    IconButton(onClick = onOpenSettings) {
                        Icon(Icons.Default.Launch, contentDescription = "Open System Settings")
                    }
                }
            }
            }
            
            // Permission summary
            PermissionSummaryCard(
                totalPermissions = permissions.size,
                grantedCount = permissions.count { it.status == PermissionStatus.GRANTED },
                requiredCount = permissions.count { it.isRequired },
                modifier = Modifier.fillMaxWidth()
            )
            
            // Search
            OutlinedTextField(
                value = searchQuery,
                onValueChange = viewModel::setSearchQuery,
                placeholder = { Text("Search permissions...") },
                leadingIcon = { Icon(Icons.Default.Search, contentDescription = "Search") },
                trailingIcon = if (searchQuery.isNotEmpty()) {
                    {
                        IconButton(onClick = { viewModel.setSearchQuery("") }) {
                            Icon(Icons.Default.Clear, contentDescription = "Clear")
                        }
                    }
                } else null,
                modifier = Modifier.fillMaxWidth(),
                singleLine = true
            )
            
            // Filter controls
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Category filter chips
                LazyRow(
                    modifier = Modifier.weight(1f),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    item {
                        FilterChip(
                            selected = selectedCategory == null,
                            onClick = { viewModel.setSelectedCategory(null) },
                            label = { Text("All") }
                        )
                    }
                    
                    items(categorizedPermissions.keys.toList()) { importance ->
                        FilterChip(
                            selected = selectedCategory == importance,
                            onClick = { viewModel.setSelectedCategory(importance) },
                            label = { 
                                Text(
                                    text = importance.toString(),
                                    maxLines = 1,
                                    overflow = TextOverflow.Ellipsis
                                )
                            }
                        )
                    }
                }
                
                // Required only toggle
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(4.dp)
                ) {
                    Switch(
                        checked = showOnlyRequired,
                        onCheckedChange = viewModel::setShowOnlyRequired,
                        modifier = Modifier.height(32.dp)
                    )
                    Text(
                        text = "Required only",
                        style = MaterialTheme.typography.bodySmall
                    )
                }
            }
        }
        
        // Permissions list
        val filteredPermissions = permissions.filter { permission ->
            val matchesSearch = if (searchQuery.isEmpty()) true else {
                permission.name.contains(searchQuery, ignoreCase = true) ||
                permission.description.contains(searchQuery, ignoreCase = true)
            }
            val matchesCategory = selectedCategory == null || permission.importance == selectedCategory
            val matchesRequired = !showOnlyRequired || permission.isRequired
            
            matchesSearch && matchesCategory && matchesRequired
        }
        
        if (filteredPermissions.isEmpty()) {
            EmptyPermissionsView(
                message = when {
                    searchQuery.isNotEmpty() -> "No permissions found for \"$searchQuery\""
                    showOnlyRequired -> "No required permissions"
                    else -> "No permissions available"
                }
            )
        } else {
            LazyColumn(
                modifier = Modifier.fillMaxSize(),
                contentPadding = PaddingValues(16.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(
                    items = filteredPermissions.groupBy { it.importance }.entries.toList(),
                    key = { it.key }
                ) { (importance, categoryPermissions) ->
                    if (selectedCategory == null) {
                        PermissionCategorySection(
                            category = importance.toString(),
                            permissions = categoryPermissions,
                            onPermissionToggle = { permission ->
                                // Only allow toggle for non-critical permissions
                                if (permission.importance != PermissionImportance.CRITICAL) {
                                    viewModel.togglePermission(permission)
                                }
                            },
                            onShowInfo = { permission ->
                                showInfoDialog = permission
                            },
                            modifier = Modifier
                        )
                    } else {
                        categoryPermissions.forEach { permission ->
                            PermissionItemCard(
                                permission = permission,
                                onToggle = {
                                    if (permission.importance != PermissionImportance.CRITICAL) {
                                        viewModel.togglePermission(permission)
                                    }
                                },
                                onShowInfo = { showInfoDialog = permission },
                                modifier = Modifier
                            )
                        }
                    }
                }
            }
        }
    }
    
    // Permission info dialog
    showInfoDialog?.let { permission ->
        PermissionInfoDialog(
            permission = permission,
            onDismiss = { showInfoDialog = null },
            onToggle = {
                if (permission.importance != PermissionImportance.CRITICAL) {
                    viewModel.togglePermission(permission)
                }
                showInfoDialog = null
            }
        )
    }
    
    // Settings dialog
    if (showSettingsDialog) {
        PermissionSettingsDialog(
            onDismiss = { showSettingsDialog = false },
            onOpenSystemSettings = onOpenSettings
        )
    }
}

@Composable
private fun PermissionSummaryCard(
    totalPermissions: Int,
    grantedCount: Int,
    requiredCount: Int,
    modifier: Modifier = Modifier
) {
    val grantedPercentage = if (totalPermissions > 0) (grantedCount.toFloat() / totalPermissions * 100).toInt() else 0
    val isHealthy = grantedCount >= requiredCount
    
    Card(
        modifier = modifier,
        colors = CardDefaults.cardColors(
            containerColor = if (isHealthy) {
                MaterialTheme.colorScheme.primaryContainer
            } else {
                MaterialTheme.colorScheme.errorContainer
            }
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "Permission Status",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Medium
                )
                
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(4.dp)
                ) {
                    Icon(
                        imageVector = if (isHealthy) Icons.Default.CheckCircle else Icons.Default.Warning,
                        contentDescription = null,
                        tint = if (isHealthy) {
                            MaterialTheme.colorScheme.primary
                        } else {
                            MaterialTheme.colorScheme.error
                        },
                        modifier = Modifier.size(20.dp)
                    )
                    Text(
                        text = if (isHealthy) "Healthy" else "Needs Attention",
                        style = MaterialTheme.typography.bodyMedium,
                        color = if (isHealthy) {
                            MaterialTheme.colorScheme.primary
                        } else {
                            MaterialTheme.colorScheme.error
                        }
                    )
                }
            }
            
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Column {
                    Text(
                        text = "$grantedCount",
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = "Granted",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
                
                Column {
                    Text(
                        text = "$requiredCount",
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = "Required",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
                
                Column {
                    Text(
                        text = "$totalPermissions",
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = "Total",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
                
                Column {
                    Text(
                        text = "$grantedPercentage%",
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = "Complete",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
        }
    }
}

@Composable
private fun PermissionCategorySection(
    category: String,
    permissions: List<AppPermission>,
    onPermissionToggle: (AppPermission) -> Unit,
    onShowInfo: (AppPermission) -> Unit,
    modifier: Modifier = Modifier
) {
    val grantedCount = permissions.count { it.status == PermissionStatus.GRANTED }
    val totalCount = permissions.size
    
    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        // Category header
        Card(
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surfaceVariant
            )
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = category,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Medium
                )
                
                Text(
                    text = "$grantedCount/$totalCount",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
        
        // Category permissions
        permissions.forEach { permission ->
            PermissionItemCard(
                permission = permission,
                onToggle = { onPermissionToggle(permission) },
                onShowInfo = { onShowInfo(permission) }
            )
        }
    }
}

@Composable
private fun PermissionItemCard(
    permission: AppPermission,
    onToggle: () -> Unit,
    onShowInfo: () -> Unit,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.spacedBy(12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Permission icon
            Box(
                modifier = Modifier
                    .size(40.dp)
                    .background(
                        color = if (permission.status == PermissionStatus.GRANTED) {
                            MaterialTheme.colorScheme.primaryContainer
                        } else if (permission.isRequired) {
                            MaterialTheme.colorScheme.errorContainer
                        } else {
                            MaterialTheme.colorScheme.surfaceVariant
                        },
                        shape = RoundedCornerShape(8.dp)
                    ),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = getPermissionIcon(permission),
                    contentDescription = null,
                    tint = if (permission.status == PermissionStatus.GRANTED) {
                        MaterialTheme.colorScheme.onPrimaryContainer
                    } else if (permission.isRequired) {
                        MaterialTheme.colorScheme.onErrorContainer
                    } else {
                        MaterialTheme.colorScheme.onSurfaceVariant
                    },
                    modifier = Modifier.size(24.dp)
                )
            }
            
            // Permission details
            Column(
                modifier = Modifier.weight(1f),
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Row(
                    horizontalArrangement = Arrangement.spacedBy(8.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = permission.name,
                        style = MaterialTheme.typography.bodyLarge,
                        fontWeight = FontWeight.Medium
                    )
                    
                    if (permission.isRequired) {
                        Surface(
                            shape = RoundedCornerShape(4.dp),
                            color = MaterialTheme.colorScheme.error
                        ) {
                            Text(
                                text = "REQUIRED",
                                style = MaterialTheme.typography.labelSmall,
                                color = MaterialTheme.colorScheme.onError,
                                modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp)
                            )
                        }
                    }
                }
                
                Text(
                    text = permission.description,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis
                )
                
                // Status indicator
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(4.dp)
                ) {
                    val statusIcon = if (permission.status == PermissionStatus.GRANTED) Icons.Default.CheckCircle else Icons.Default.Cancel
                    val statusColor = if (permission.status == PermissionStatus.GRANTED) {
                        MaterialTheme.colorScheme.primary
                    } else if (permission.isRequired) {
                        MaterialTheme.colorScheme.error
                    } else {
                        MaterialTheme.colorScheme.onSurfaceVariant
                    }
                    
                    Icon(
                        imageVector = statusIcon,
                        contentDescription = null,
                        tint = statusColor,
                        modifier = Modifier.size(16.dp)
                    )
                    Text(
                        text = if (permission.status == PermissionStatus.GRANTED) "Granted" else "Not granted",
                        style = MaterialTheme.typography.bodySmall,
                        color = statusColor
                    )
                }
            }
            
            // Action buttons
            Row(
                horizontalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                IconButton(onClick = onShowInfo) {
                    Icon(
                        Icons.Default.Info,
                        contentDescription = "Permission info",
                        tint = MaterialTheme.colorScheme.onSurface
                    )
                }
                
                if (permission.importance != PermissionImportance.CRITICAL) {
                    Switch(
                        checked = permission.status == PermissionStatus.GRANTED,
                        onCheckedChange = { onToggle() },
                        enabled = permission.importance != PermissionImportance.CRITICAL
                    )
                } else {
                    IconButton(
                        onClick = onToggle,
                        enabled = false
                    ) {
                        Icon(
                            Icons.Default.Lock,
                            contentDescription = "Cannot toggle",
                            tint = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun EmptyPermissionsView(
    message: String,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(32.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Icon(
            imageVector = Icons.Default.Security,
            contentDescription = null,
            modifier = Modifier.size(64.dp),
            tint = MaterialTheme.colorScheme.onSurfaceVariant
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(
            text = message,
            style = MaterialTheme.typography.bodyLarge,
            color = MaterialTheme.colorScheme.onSurfaceVariant,
            textAlign = TextAlign.Center
        )
    }
}

@Composable
private fun PermissionInfoDialog(
    permission: AppPermission,
    onDismiss: () -> Unit,
    onToggle: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        icon = {
            Icon(
                imageVector = getPermissionIcon(permission),
                contentDescription = null
            )
        },
        title = {
            Text(permission.name)
        },
        text = {
            Column(
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(permission.description)
                
                if (permission.explanation.isNotEmpty()) {
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "Details:",
                        style = MaterialTheme.typography.titleSmall
                    )
                    Text(
                        text = permission.explanation,
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
                
                if (permission.isRequired) {
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "This permission is required for the app to function properly.",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.error
                    )
                }
                
                if (permission.importance == PermissionImportance.CRITICAL) {
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "This permission can only be changed in system settings.",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
        },
        confirmButton = {
            if (permission.importance != PermissionImportance.CRITICAL) {
                TextButton(onClick = onToggle) {
                    Text(if (permission.status == PermissionStatus.GRANTED) "Revoke" else "Grant")
                }
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("Close")
            }
        }
    )
}

@Composable
private fun PermissionSettingsDialog(
    onDismiss: () -> Unit,
    onOpenSystemSettings: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text("Permission Settings") },
        text = {
            Column(
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Text("Manage how permissions are handled in the app.")
                
                OutlinedButton(
                    onClick = {
                        onOpenSystemSettings()
                        onDismiss()
                    },
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Icon(
                        Icons.Default.Launch,
                        contentDescription = null,
                        modifier = Modifier.size(18.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Open System Settings")
                }
            }
        },
        confirmButton = {
            TextButton(onClick = onDismiss) {
                Text("Done")
            }
        }
    )
}

// Utility function to get permission icon
private fun getPermissionIcon(permission: AppPermission) = when (permission.name) {
    android.Manifest.permission.READ_EXTERNAL_STORAGE,
    android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
    android.Manifest.permission.MANAGE_EXTERNAL_STORAGE -> Icons.Default.Folder
    android.Manifest.permission.INTERNET -> Icons.Default.Language
    android.Manifest.permission.ACCESS_NETWORK_STATE -> Icons.Default.NetworkCheck
    android.Manifest.permission.CAMERA -> Icons.Default.Camera
    android.Manifest.permission.RECORD_AUDIO -> Icons.Default.Mic
    android.Manifest.permission.ACCESS_FINE_LOCATION,
    android.Manifest.permission.ACCESS_COARSE_LOCATION -> Icons.Default.LocationOn
    android.Manifest.permission.READ_PHONE_STATE -> Icons.Default.Phone
    android.Manifest.permission.VIBRATE -> Icons.Default.Vibration
    android.Manifest.permission.WAKE_LOCK -> Icons.Default.Lock
    android.Manifest.permission.FOREGROUND_SERVICE -> Icons.Default.PlayArrow
    android.Manifest.permission.POST_NOTIFICATIONS -> Icons.Default.Notifications
    else -> Icons.Default.Security
}